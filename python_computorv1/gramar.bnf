equa	: expr EQUAL expr
expr    : term ((PLUS | MINUS) term)*
term    : expo ((MUL | DIV) expo)*
expo	: factor ((POWER) factor)*
factor  : LPAR expr RPAR | coeff 
coeff	:  ((PLUS | MINUS) INTEGER) | X


INTEGER = DIGIT (DIGIT)*
DIGIT   = '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'
PLUS    = '+'
MINUS   = '-'
MUL     = '*'
DIV     = '/'
LPAR    = '('
RPAR    = ')'
X		= 'X' | 'x'
POWER	= '^'
EQUAL	= '='

v1
# gerer les unary operator devant x
# ameliorer le parsing integer
	- gerer les float
# optimiser Number
	- gerer les float
# optimiser Coeff
	- supprimmer les coeffs nulles

v2
# ameliorer les puissances
	- gerer `NUmber ** Number` -> Number.__pow__(Number, Number)


